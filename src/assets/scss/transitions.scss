@use 'src/assets/scss/app';

@mixin transition($property: null, $delay: null) {
    transition-duration: app.$transition-duration;
    transition-timing-function: app.$transition-timing;

    @if ($property) {
        transition-property: $property;
    }

    @if ($delay) {
        transition-delay: $delay;
    }
}

/**
 * Fade
 */
.fade {
    &-enter-active,
    &-leave-active {
        @include transition(opacity);
    }

    &-enter-from,
    &-leave-to {
        opacity: 0;
    }
}

/**
 * Fade and slide up
 */
.fade-up {
    &-enter-active,
    &-leave-active {
        @include transition((opacity, transform));
    }

    &-enter-from,
    &-leave-to {
        opacity: 0;
        transform: translateY(2vw);
    }
}

/**
 * Fade and slide left
 */
.fade-left {
    &-enter-active,
    &-leave-active {
        @include transition((opacity, transform));
    }

    &-enter-from,
    &-leave-to {
        opacity: 0;
        transform: translateX(max(2vh, 2vw));
    }
}

/**
 * Fade and slide right
 */
.fade-right {
    &-enter-active,
    &-leave-active {
        @include transition((opacity, transform));
    }

    &-enter-from,
    &-leave-to {
        opacity: 0;
        transform: translateX(min(-2vh, -2vw));
    }
}

/**
 * Fade and zoom
 */
.fade-zoom {
    &-enter-active,
    &-leave-active {
        @include transition((opacity, transform));
    }

    &-enter-from,
    &-leave-to {
        opacity: 0;
        transform: scale(0.95);
    }
}

/**
 * Fade and slide left with delays
 */
.fade-left-staggered-enter {
    &-active {
        @include transition((opacity, transform), calc(100ms * var(--i)));
        transition-duration: app.$transition-duration * 1.5;
    }

    &-from {
        opacity: 0;
        transform: translateX(max(2vh, 2vw));
    }
}

/**
 * Prevent issue with reveal component
 */
.appear {
    display: flex;
    flex-direction: column;

    &.fade-up-enter-from,
    &.fade-left-enter-from,
    &.fade-right-enter-from,
    &.fade-zoom-enter-from {
        transition: none;
    }
}
